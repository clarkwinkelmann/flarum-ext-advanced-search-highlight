{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@clarkwinkelmann/advanced-search-highlight/webpack/bootstrap","webpack://@clarkwinkelmann/advanced-search-highlight/webpack/runtime/compat get default export","webpack://@clarkwinkelmann/advanced-search-highlight/webpack/runtime/define property getters","webpack://@clarkwinkelmann/advanced-search-highlight/webpack/runtime/hasOwnProperty shorthand","webpack://@clarkwinkelmann/advanced-search-highlight/external root \"flarum.core.compat['common/extend']\"","webpack://@clarkwinkelmann/advanced-search-highlight/external root \"flarum.core.compat['forum/app']\"","webpack://@clarkwinkelmann/advanced-search-highlight/external root \"flarum.core.compat['forum/components/DiscussionsSearchSource']\"","webpack://@clarkwinkelmann/advanced-search-highlight/external root \"flarum.core.compat['forum/components/DiscussionListItem']\"","webpack://@clarkwinkelmann/advanced-search-highlight/external root \"flarum.core.compat['forum/components/CommentPost']\"","webpack://@clarkwinkelmann/advanced-search-highlight/./src/forum/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionsSearchSource'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionListItem'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/CommentPost'];","import {Vnode, Children} from 'mithril';\nimport {extend, override} from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport DiscussionsSearchSource from 'flarum/forum/components/DiscussionsSearchSource';\nimport Model from 'flarum/common/Model';\nimport Discussion from 'flarum/common/models/Discussion';\nimport DiscussionListItem from 'flarum/forum/components/DiscussionListItem';\nimport CommentPost from 'flarum/forum/components/CommentPost';\n\nfunction walkVdom(node: Children, callback: (node: Vnode) => void) {\n    if (typeof node !== 'object' || node === null) {\n        return;\n    }\n\n    if (Array.isArray(node)) {\n        node.forEach(child => walkVdom(child, callback));\n        return;\n    }\n\n    callback(node);\n\n    if (Array.isArray(node.children)) {\n        walkVdom(node.children, callback)\n    }\n}\n\ninterface NodeInfo {\n    node: HTMLElement\n    textLength: number\n    hasMark: boolean\n}\n\nfunction highlightedResult(model: Model, attribute: string, query: string, length?: number): string | null | undefined {\n    const highlightedHtml = model.attribute<string>(attribute + '_highlight_' + query);\n\n    if (!highlightedHtml || !length) {\n        return highlightedHtml;\n    }\n\n    // Similar to getPlainContent(), we don't want excessive non-text content\n    // But unlike Flarum's native solution we are going to preserve most formatting since the backend already went the trouble of highlighting it\n    const html = highlightedHtml.replace(/(<\\/p>|<br\\/?>)/g, '$1 ').replace(/<img\\b[^>]*>/gi, ' ');\n\n    const element = new DOMParser().parseFromString(html, 'text/html').documentElement;\n\n    const rootNodes: NodeInfo[] = [];\n\n    let lengthUntilFirstMark = 0;\n    let foundFirstMark = false;\n\n    // Just like in Flarum's getPlainContent() we will remove quotes to save space\n    // We will also remove script tags but just to make sure they never execute\n    // Line breaks will be removed and the nbsp inserted above will take effect\n    ['blockquote', 'script', 'br'].forEach(selector => {\n        element.querySelectorAll(selector).forEach(node => node.remove());\n    });\n\n    // Replace paragraphs with spans to force everything to collapse to one line\n    // The nbsp inserted above will ensure some inline spacing remains\n    ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'].forEach(selector => {\n        element.querySelectorAll(selector).forEach(blockNode => {\n            const span = element.ownerDocument.createElement('span');\n\n            if (selector.indexOf('h') === 0) {\n                span.className = 'title-in-excerpt';\n            }\n\n            span.innerHTML = blockNode.innerHTML;\n\n            blockNode.parentNode!.replaceChild(span, blockNode);\n        });\n    });\n\n    element.querySelector('body')!.childNodes.forEach(node => {\n        if (!(node instanceof HTMLElement)) {\n            return;\n        }\n\n        const textLength = node.innerText.length\n        const hasMark = node.querySelector('mark') !== null;\n\n        if (!foundFirstMark) {\n            if (hasMark) {\n                foundFirstMark = true;\n            } else {\n                lengthUntilFirstMark += textLength;\n            }\n        }\n\n        rootNodes.push({\n            node,\n            textLength,\n            hasMark,\n        });\n    });\n\n    // TODO: if there's enough space between the first match and nothing interesting to show later in the string, we should show more of the start just like Flarum's highlight() method does\n\n    let outputtedLength = 0;\n\n    rootNodes.forEach(nodeInfo => {\n        // Skip nodes until we find the first with a mark, then we'll count the length from there\n        // If the mark was not found above, ignore this step and return content from the first node\n        if (outputtedLength === 0 && !nodeInfo.hasMark && foundFirstMark) {\n            nodeInfo.node.remove();\n            return;\n        }\n\n        if (outputtedLength > length) {\n            nodeInfo.node.remove();\n        }\n\n        outputtedLength += nodeInfo.textLength;\n    });\n\n    return element.innerHTML;\n}\n\napp.initializers.add('clarkwinkelmann-advanced-search-highlight', () => {\n    extend(DiscussionsSearchSource.prototype, 'view', function (dom, query) {\n        dom.forEach(node => {\n            const index = node && node.attrs && node.attrs['data-index'];\n\n            if (!index || index.indexOf('discussions') !== 0) {\n                return;\n            }\n\n            const discussion = app.store.getById<Discussion>('discussions', index.replace('discussions', ''));\n\n            if (!discussion) {\n                return;\n            }\n\n            walkVdom(node, child => {\n                const {className} = child.attrs as any || {};\n\n                if (className === 'DiscussionSearchResult-title') {\n                    const highlight = highlightedResult(discussion, 'title', query);\n\n                    if (highlight) {\n                        child.children = [\n                            m.trust(highlight),\n                        ];\n                    }\n                } else if (className === 'DiscussionSearchResult-excerpt') {\n                    const mostRelevantPost = discussion.mostRelevantPost();\n                    const highlight = mostRelevantPost && highlightedResult(mostRelevantPost, 'contentHtml', query, 100);\n\n                    if (highlight) {\n                        child.children = [\n                            m.trust(highlight),\n                        ];\n                    }\n                }\n            });\n        });\n    });\n\n    extend(DiscussionListItem.prototype, 'view', function (dom) {\n        const {q} = this.attrs.params;\n\n        if (!q) {\n            return;\n        }\n\n        walkVdom(dom, node => {\n            if (node.tag === 'h2' && ((node.attrs as any || {}).className || '').indexOf('DiscussionListItem-title') !== -1) {\n                const highlight = highlightedResult(this.attrs.discussion, 'title', q);\n\n                if (highlight) {\n                    node.children = [\n                        m.trust(highlight),\n                    ];\n                }\n            }\n        });\n    });\n\n    extend(DiscussionListItem.prototype, 'infoItems', function (items) {\n        const {q} = this.attrs.params;\n\n        if (!q || !items.has('excerpt')) {\n            return;\n        }\n\n        const post = this.attrs.discussion.mostRelevantPost() || this.attrs.discussion.firstPost();\n\n        const highlight = highlightedResult(post, 'contentHtml', q, 175);\n\n        if (highlight) {\n            items.setContent('excerpt', m.trust(highlight));\n        }\n    });\n\n    extend(CommentPost.prototype, 'oninit', function () {\n        this.subtree.check(() => app.current.get('stream')?.highlightPostSearch);\n    });\n\n    extend(CommentPost.prototype, 'content', function (dom) {\n        const query = app.current.get('stream')?.highlightPostSearch;\n\n        if (!query) {\n            return;\n        }\n\n        const contentHtml = highlightedResult(this.attrs.post, 'contentHtml', query);\n\n        if (!contentHtml) {\n            return;\n        }\n\n        walkVdom(dom, child => {\n            if ((child.attrs as any || {}).className === 'Post-body') {\n                child.children = [\n                    m.trust(contentHtml),\n                ];\n            }\n        });\n    });\n\n    override(CommentPost.prototype, 'refreshContent', function (original) {\n        const query = app.current.get('stream')?.highlightPostSearch;\n\n        if (!query) {\n            return original();\n        }\n\n        const contentHtml = highlightedResult(this.attrs.post, 'contentHtml', query);\n\n        if (!contentHtml) {\n            return original();\n        }\n\n        // Same as original code, but we repeat it for when the original contentHtml is switched with the highlighted content\n        if (this.contentHtml !== contentHtml) {\n            this.$('.Post-body script').each(function () {\n                const script = document.createElement('script');\n                script.textContent = this.textContent;\n                Array.from(this.attributes).forEach((attr) => script.setAttribute(attr.name, attr.value));\n                this.parentNode!.replaceChild(script, this);\n            });\n        }\n\n        this.contentHtml = contentHtml;\n    });\n});\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","flarum","core","compat","walkVdom","node","callback","Array","isArray","forEach","child","children","highlightedResult","model","attribute","query","length","highlightedHtml","html","replace","element","DOMParser","parseFromString","documentElement","rootNodes","foundFirstMark","selector","querySelectorAll","remove","blockNode","span","ownerDocument","createElement","indexOf","className","innerHTML","parentNode","replaceChild","querySelector","childNodes","HTMLElement","textLength","innerText","hasMark","push","outputtedLength","nodeInfo","app","add","extend","DiscussionsSearchSource","dom","index","attrs","discussion","getById","highlight","m","trust","mostRelevantPost","DiscussionListItem","_this","q","this","params","tag","items","has","firstPost","setContent","CommentPost","subtree","check","_app$current$get","highlightPostSearch","_app$current$get2","contentHtml","post","override","original","_app$current$get3","$","each","script","document","textContent","from","attributes","attr","setAttribute","name","value"],"sourceRoot":""}